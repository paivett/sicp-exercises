(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()    
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1
                     (intersection-set (cdr set1)
                                       (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((< x2 x1)
               (intersection-set set1 (cdr set2)))))))

(define (union-set set1 set2)
  (define (merge s1 s2 output)
    (if (or (null? s1) (null? s2))
        (append output s1 s2)
        (let ((x1 (car s1)) (x2 (car s2)))
          (cond ((= x1 x2) (merge (cdr s1) (cdr s2) (append output (list x1))))
                ((< x1 x2) (merge (cdr s1) s2 (append output (list x1))))
                ((< x2 x1) (merge s1 (cdr set2) (append output (list x2))))))))

  (merge set1 set2 '()))
